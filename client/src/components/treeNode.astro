---
import { Profile } from "@interfaces/profile";
import { Parenthood } from "@interfaces/parenthood";

const pb = Astro.locals.pb;

interface Props {
  profile: Profile;
}

const { profile } = Astro.props;
const mariages = await pb.collection("mariages").getFullList({
  filter: `husband = '${profile.id}' || wife = '${profile.id}'`,
  expand: "husband, wife",
});

let husband: Profile;
let wife: Profile;
let parenthood: Parenthood[] = [];
const lignageIsHusband = profile.sex === "M";

if (mariages.length > 0) {
  parenthood = await pb.collection("parenthoods").getFullList({
    filter: `mariage = '${mariages[0].id}'`,
    expand: "child",
  });

  husband = profile.sex === "M" ? profile : mariages[0].expand.husband;
  wife = profile.sex === "F" ? profile : mariages[0].expand.wife;
} else {
  husband = profile.sex === "M" ? profile : null;
  wife = profile.sex === "F" ? profile : null;
}
---

<div
  x-data="{ open: true }"
  class="tree-node relative flex items-center"
  hx-swap="outerHTML"
  hx-trigger={`tree-refresh-${profile.id} from:body`}
  hx-get={`/treenode/partial/${profile.id}`}>
  <div class="border-black border-b w-8"></div>
  <div class="py-1">
    {
      husband && (
        <button
          id={`node-${husband.id}`}
          hx-get={`/profile/partial/${husband.id}`}
          hx-target="#profile-card"
          hx-swap="innerHTML"
          class:list={[
            "w-32 bg-blue-100 p-2 block whitespace-nowrap overflow-clip hover:whitespace-normal",
            lignageIsHusband && "border border-black rounded-lg",
          ]}
        >
          {husband.name}
        </button>
      )
    }
    {
      wife && (
        <button
          id={`node-${wife.id}`}
          hx-get={`/profile/partial/${wife.id}`}
          hx-target="#profile-card"
          hx-swap="innerHTML"
          class:list={[
            "w-32 p-2 bg-pink-100 block whitespace-nowrap overflow-clip hover:whitespace-normal",
            !lignageIsHusband && "border border-black rounded-lg",
          ]}
        >
          {wife.name}
        </button>
      )
    }
  </div>
  {
    !!parenthood.length && (
      <button x-on:click="open=!open" class="opacity-0 hover:opacity-100">
        x
      </button>
    )
  }

  <div x-show="open" class="flex flex-col justify-center">
    {
      parenthood
        .sort((a, b) =>
          a.expand.child.birthDate.localeCompare(b.expand.child.birthDate)
        )
        .map((child) => <Astro.self profile={child.expand.child} />)
    }
  </div>
</div>
<style>
  .tree-node::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    border-left: 1px solid #000000;
  }
  .tree-node:first-child::before {
    height: 50%;
    top: 50%;
  }
  .tree-node:last-child::before {
    height: 50%;
  }
  .tree-node:first-child:last-child::before {
    height: 0;
  }
</style>
